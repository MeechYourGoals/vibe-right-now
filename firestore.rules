
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isVenuePartner() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'venue_partner';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
      
      // User preferences subcollection
      match /preferences/{prefId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow write: if isAuthenticated() && (isOwner(userId) || isAdmin());
      }
    }
    
    // Locations collection
    match /locations/{locationId} {
      // Anyone can read location data
      allow read: if true;
      // Only admins and venue partners can create/update/delete
      allow create: if isAuthenticated() && (isAdmin() || isVenuePartner());
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (isVenuePartner() && resource.data.ownerId == request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        (isVenuePartner() && resource.data.ownerId == request.auth.uid)
      );
      
      // Reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (
          isAdmin() || 
          resource.data.userId == request.auth.uid
        );
      }
    }
    
    // Events collection
    match /events/{eventId} {
      // Anyone can read event data
      allow read: if true;
      // Only admins and venue partners can create/update/delete
      allow create: if isAuthenticated() && (isAdmin() || isVenuePartner());
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (isVenuePartner() && resource.data.ownerId == request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        (isVenuePartner() && resource.data.ownerId == request.auth.uid)
      );
    }
    
    // Posts collection
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (
          isAdmin() || 
          resource.data.userId == request.auth.uid
        );
      }
    }
    
    // Trends collection - generated by backend
    match /trends/{trendId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Analytics collection - only admin access
    match /analytics/{docId} {
      allow read: if isAuthenticated() && (isAdmin() || isVenuePartner());
      allow write: if isAdmin();
    }
  }
}
